Terminals which are not used

   FUNDEC


State 1 conflicts: 1 shift/reduce
State 44 conflicts: 1 shift/reduce
State 47 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: exp

    2 exp: valexp
    3    | assignexp
    4    | whileexp
    5    | forexp
    6    | BREAK

    7 valexp: lvalue
    8       | constexp
    9       | seqlist
   10       | callexp
   11       | opexp
   12       | recexp
   13       | arrayexp
   14       | letexp
   15       | ifexp

   16 decs: dec
   17     | dec decs

   18 dec: tydecs
   19    | vardec
   20    | fundecs

   21 tydecs: tydec
   22       | tydec tydecs

   23 tydec: TYPE ID EQ ty

   24 ty: ID
   25   | LBRACE tyfields RBRACE
   26   | ARRAY OF ID

   27 tyfields: /* empty */
   28         | tyfield
   29         | tyfield COMMA tyfields

   30 tyfield: ID COLON ID

   31 vardec: VAR ID ASSIGN exp
   32       | VAR ID COLON ID ASSIGN exp

   33 fundecs: fundec
   34        | fundec fundecs

   35 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp
   36       | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

   37 constexp: INT
   38         | STRING
   39         | NIL

   40 lvalue: ID
   41       | ID LBRACK exp RBRACK
   42       | lvalue DOT ID
   43       | lvalue LBRACK exp RBRACK

   44 arrayexp: ID LBRACK exp RBRACK OF exp

   45 seqlist: LPAREN exps RPAREN
   46        | LPAREN RPAREN

   47 exps: exp
   48     | exp SEMICOLON exps

   49 callexp: ID LPAREN RPAREN
   50        | ID LPAREN funcargs RPAREN

   51 funcargs: exp
   52         | exp COMMA funcargs

   53 opexp: valexp PLUS valexp
   54      | valexp MINUS valexp
   55      | valexp TIMES valexp
   56      | valexp DIVIDE valexp
   57      | MINUS valexp
   58      | valexp EQ valexp
   59      | valexp NEQ valexp
   60      | valexp GT valexp
   61      | valexp LT valexp
   62      | valexp GE valexp
   63      | valexp LE valexp
   64      | valexp AND valexp
   65      | valexp OR valexp

   66 recexp: ID LBRACE RBRACE
   67       | ID LBRACE recfields RBRACE

   68 recfields: recfield
   69          | recfield COMMA recfields

   70 recfield: ID EQ exp

   71 assignexp: lvalue ASSIGN exp

   72 ifexp: IF valexp THEN exp
   73      | IF valexp THEN exp ELSE exp

   74 whileexp: WHILE exp DO exp

   75 forexp: FOR ID ASSIGN exp TO exp DO exp

   76 letexp: LET decs IN exps END


Terminals, with rules where they appear

$end (0) 0
error (256)
ID (258) 23 24 26 30 31 32 35 36 40 41 42 44 49 50 66 67 70 75
STRING (259) 38
INT (260) 37
COMMA (261) 29 52 69
COLON (262) 30 32 36
SEMICOLON (263) 48
LPAREN (264) 35 36 45 46 49 50
RPAREN (265) 35 36 45 46 49 50
LBRACK (266) 41 43 44
RBRACK (267) 41 43 44
LBRACE (268) 25 66 67
RBRACE (269) 25 66 67
DOT (270) 42
PLUS (271) 53
MINUS (272) 54 57
TIMES (273) 55
DIVIDE (274) 56
EQ (275) 23 35 36 58 70
NEQ (276) 59
LT (277) 61
LE (278) 63
GT (279) 60
GE (280) 62
AND (281) 64
OR (282) 65
ASSIGN (283) 31 32 71 75
ARRAY (284) 26
IF (285) 72 73
THEN (286) 72 73
ELSE (287) 73
WHILE (288) 74
FOR (289) 75
TO (290) 75
DO (291) 74 75
LET (292) 76
IN (293) 76
END (294) 76
OF (295) 26 44
BREAK (296) 6
NIL (297) 39
FUNCTION (298) 35 36
VAR (299) 31 32
TYPE (300) 23
EXP (301)
FUNDEC (302)
UMINUS (303)
IFX (304)


Nonterminals, with rules where they appear

$accept (50)
    on left: 0
program (51)
    on left: 1, on right: 0
exp (52)
    on left: 2 3 4 5 6, on right: 1 31 32 35 36 41 43 44 47 48 51 52
    70 71 72 73 74 75
valexp (53)
    on left: 7 8 9 10 11 12 13 14 15, on right: 2 53 54 55 56 57 58
    59 60 61 62 63 64 65 72 73
decs (54)
    on left: 16 17, on right: 17 76
dec (55)
    on left: 18 19 20, on right: 16 17
tydecs (56)
    on left: 21 22, on right: 18 22
tydec (57)
    on left: 23, on right: 21 22
ty (58)
    on left: 24 25 26, on right: 23
tyfields (59)
    on left: 27 28 29, on right: 25 29 35 36
tyfield (60)
    on left: 30, on right: 28 29
vardec (61)
    on left: 31 32, on right: 19
fundecs (62)
    on left: 33 34, on right: 20 34
fundec (63)
    on left: 35 36, on right: 33 34
constexp (64)
    on left: 37 38 39, on right: 8
lvalue (65)
    on left: 40 41 42 43, on right: 7 42 43 71
arrayexp (66)
    on left: 44, on right: 13
seqlist (67)
    on left: 45 46, on right: 9
exps (68)
    on left: 47 48, on right: 45 48 76
callexp (69)
    on left: 49 50, on right: 10
funcargs (70)
    on left: 51 52, on right: 50 52
opexp (71)
    on left: 53 54 55 56 57 58 59 60 61 62 63 64 65,
    on right: 11
recexp (72)
    on left: 66 67, on right: 12
recfields (73)
    on left: 68 69, on right: 67 69
recfield (74)
    on left: 70, on right: 68 69
assignexp (75)
    on left: 71, on right: 3
ifexp (76)
    on left: 72 73, on right: 15
whileexp (77)
    on left: 74, on right: 4
forexp (78)
    on left: 75, on right: 5
letexp (79)
    on left: 76, on right: 14


state 0

    0 $accept: . program $end

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    program    go to state 12
    exp        go to state 13
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 1

   40 lvalue: ID .
   41       | ID . LBRACK exp RBRACK
   44 arrayexp: ID . LBRACK exp RBRACK OF exp
   49 callexp: ID . LPAREN RPAREN
   50        | ID . LPAREN funcargs RPAREN
   66 recexp: ID . LBRACE RBRACE
   67       | ID . LBRACE recfields RBRACE

    LPAREN  shift, and go to state 27
    LBRACK  shift, and go to state 28
    LBRACE  shift, and go to state 29

    LBRACK    [reduce using rule 40 (lvalue)]
    $default  reduce using rule 40 (lvalue)


state 2

   38 constexp: STRING .

    $default  reduce using rule 38 (constexp)


state 3

   37 constexp: INT .

    $default  reduce using rule 37 (constexp)


state 4

   45 seqlist: LPAREN . exps RPAREN
   46        | LPAREN . RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 30
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 31
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    exps       go to state 32
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 5

   57 opexp: MINUS . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 33
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 6

   72 ifexp: IF . valexp THEN exp
   73      | IF . valexp THEN exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 35
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 7

   74 whileexp: WHILE . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 36
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 8

   75 forexp: FOR . ID ASSIGN exp TO exp DO exp

    ID  shift, and go to state 37


state 9

   76 letexp: LET . decs IN exps END

    FUNCTION  shift, and go to state 38
    VAR       shift, and go to state 39
    TYPE      shift, and go to state 40

    decs     go to state 41
    dec      go to state 42
    tydecs   go to state 43
    tydec    go to state 44
    vardec   go to state 45
    fundecs  go to state 46
    fundec   go to state 47


state 10

    6 exp: BREAK .

    $default  reduce using rule 6 (exp)


state 11

   39 constexp: NIL .

    $default  reduce using rule 39 (constexp)


state 12

    0 $accept: program . $end

    $end  shift, and go to state 48


state 13

    1 program: exp .

    $default  reduce using rule 1 (program)


state 14

    2 exp: valexp .
   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60

    $default  reduce using rule 2 (exp)


state 15

    8 valexp: constexp .

    $default  reduce using rule 8 (valexp)


state 16

    7 valexp: lvalue .
   42 lvalue: lvalue . DOT ID
   43       | lvalue . LBRACK exp RBRACK
   71 assignexp: lvalue . ASSIGN exp

    LBRACK  shift, and go to state 61
    DOT     shift, and go to state 62
    ASSIGN  shift, and go to state 63

    $default  reduce using rule 7 (valexp)


state 17

   13 valexp: arrayexp .

    $default  reduce using rule 13 (valexp)


state 18

    9 valexp: seqlist .

    $default  reduce using rule 9 (valexp)


state 19

   10 valexp: callexp .

    $default  reduce using rule 10 (valexp)


state 20

   11 valexp: opexp .

    $default  reduce using rule 11 (valexp)


state 21

   12 valexp: recexp .

    $default  reduce using rule 12 (valexp)


state 22

    3 exp: assignexp .

    $default  reduce using rule 3 (exp)


state 23

   15 valexp: ifexp .

    $default  reduce using rule 15 (valexp)


state 24

    4 exp: whileexp .

    $default  reduce using rule 4 (exp)


state 25

    5 exp: forexp .

    $default  reduce using rule 5 (exp)


state 26

   14 valexp: letexp .

    $default  reduce using rule 14 (valexp)


state 27

   49 callexp: ID LPAREN . RPAREN
   50        | ID LPAREN . funcargs RPAREN

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    RPAREN  shift, and go to state 64
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 65
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    funcargs   go to state 66
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 28

   41 lvalue: ID LBRACK . exp RBRACK
   44 arrayexp: ID LBRACK . exp RBRACK OF exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 67
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 29

   66 recexp: ID LBRACE . RBRACE
   67       | ID LBRACE . recfields RBRACE

    ID      shift, and go to state 68
    RBRACE  shift, and go to state 69

    recfields  go to state 70
    recfield   go to state 71


state 30

   46 seqlist: LPAREN RPAREN .

    $default  reduce using rule 46 (seqlist)


state 31

   47 exps: exp .
   48     | exp . SEMICOLON exps

    SEMICOLON  shift, and go to state 72

    $default  reduce using rule 47 (exps)


state 32

   45 seqlist: LPAREN exps . RPAREN

    RPAREN  shift, and go to state 73


state 33

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   57      | MINUS valexp .
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    $default  reduce using rule 57 (opexp)


state 34

    7 valexp: lvalue .
   42 lvalue: lvalue . DOT ID
   43       | lvalue . LBRACK exp RBRACK

    LBRACK  shift, and go to state 61
    DOT     shift, and go to state 62

    $default  reduce using rule 7 (valexp)


state 35

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp
   72 ifexp: IF valexp . THEN exp
   73      | IF valexp . THEN exp ELSE exp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 59
    OR      shift, and go to state 60
    THEN    shift, and go to state 74


state 36

   74 whileexp: WHILE exp . DO exp

    DO  shift, and go to state 75


state 37

   75 forexp: FOR ID . ASSIGN exp TO exp DO exp

    ASSIGN  shift, and go to state 76


state 38

   35 fundec: FUNCTION . ID LPAREN tyfields RPAREN EQ exp
   36       | FUNCTION . ID LPAREN tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 77


state 39

   31 vardec: VAR . ID ASSIGN exp
   32       | VAR . ID COLON ID ASSIGN exp

    ID  shift, and go to state 78


state 40

   23 tydec: TYPE . ID EQ ty

    ID  shift, and go to state 79


state 41

   76 letexp: LET decs . IN exps END

    IN  shift, and go to state 80


state 42

   16 decs: dec .
   17     | dec . decs

    FUNCTION  shift, and go to state 38
    VAR       shift, and go to state 39
    TYPE      shift, and go to state 40

    $default  reduce using rule 16 (decs)

    decs     go to state 81
    dec      go to state 42
    tydecs   go to state 43
    tydec    go to state 44
    vardec   go to state 45
    fundecs  go to state 46
    fundec   go to state 47


state 43

   18 dec: tydecs .

    $default  reduce using rule 18 (dec)


state 44

   21 tydecs: tydec .
   22       | tydec . tydecs

    TYPE  shift, and go to state 40

    TYPE      [reduce using rule 21 (tydecs)]
    $default  reduce using rule 21 (tydecs)

    tydecs  go to state 82
    tydec   go to state 44


state 45

   19 dec: vardec .

    $default  reduce using rule 19 (dec)


state 46

   20 dec: fundecs .

    $default  reduce using rule 20 (dec)


state 47

   33 fundecs: fundec .
   34        | fundec . fundecs

    FUNCTION  shift, and go to state 38

    FUNCTION  [reduce using rule 33 (fundecs)]
    $default  reduce using rule 33 (fundecs)

    fundecs  go to state 83
    fundec   go to state 47


state 48

    0 $accept: program $end .

    $default  accept


state 49

   53 opexp: valexp PLUS . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 84
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 50

   54 opexp: valexp MINUS . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 85
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 51

   55 opexp: valexp TIMES . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 86
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 52

   56 opexp: valexp DIVIDE . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 87
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 53

   58 opexp: valexp EQ . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 88
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 54

   59 opexp: valexp NEQ . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 89
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 55

   61 opexp: valexp LT . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 90
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 56

   63 opexp: valexp LE . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 91
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 57

   60 opexp: valexp GT . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 92
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 58

   62 opexp: valexp GE . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 93
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 59

   64 opexp: valexp AND . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 94
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 60

   65 opexp: valexp OR . valexp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    LET     shift, and go to state 9
    NIL     shift, and go to state 11

    valexp    go to state 95
    constexp  go to state 15
    lvalue    go to state 34
    arrayexp  go to state 17
    seqlist   go to state 18
    callexp   go to state 19
    opexp     go to state 20
    recexp    go to state 21
    ifexp     go to state 23
    letexp    go to state 26


state 61

   43 lvalue: lvalue LBRACK . exp RBRACK

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 96
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 62

   42 lvalue: lvalue DOT . ID

    ID  shift, and go to state 97


state 63

   71 assignexp: lvalue ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 98
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 64

   49 callexp: ID LPAREN RPAREN .

    $default  reduce using rule 49 (callexp)


state 65

   51 funcargs: exp .
   52         | exp . COMMA funcargs

    COMMA  shift, and go to state 99

    $default  reduce using rule 51 (funcargs)


state 66

   50 callexp: ID LPAREN funcargs . RPAREN

    RPAREN  shift, and go to state 100


state 67

   41 lvalue: ID LBRACK exp . RBRACK
   44 arrayexp: ID LBRACK exp . RBRACK OF exp

    RBRACK  shift, and go to state 101


state 68

   70 recfield: ID . EQ exp

    EQ  shift, and go to state 102


state 69

   66 recexp: ID LBRACE RBRACE .

    $default  reduce using rule 66 (recexp)


state 70

   67 recexp: ID LBRACE recfields . RBRACE

    RBRACE  shift, and go to state 103


state 71

   68 recfields: recfield .
   69          | recfield . COMMA recfields

    COMMA  shift, and go to state 104

    $default  reduce using rule 68 (recfields)


state 72

   48 exps: exp SEMICOLON . exps

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 31
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    exps       go to state 105
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 73

   45 seqlist: LPAREN exps RPAREN .

    $default  reduce using rule 45 (seqlist)


state 74

   72 ifexp: IF valexp THEN . exp
   73      | IF valexp THEN . exp ELSE exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 106
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 75

   74 whileexp: WHILE exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 107
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 76

   75 forexp: FOR ID ASSIGN . exp TO exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 108
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 77

   35 fundec: FUNCTION ID . LPAREN tyfields RPAREN EQ exp
   36       | FUNCTION ID . LPAREN tyfields RPAREN COLON ID EQ exp

    LPAREN  shift, and go to state 109


state 78

   31 vardec: VAR ID . ASSIGN exp
   32       | VAR ID . COLON ID ASSIGN exp

    COLON   shift, and go to state 110
    ASSIGN  shift, and go to state 111


state 79

   23 tydec: TYPE ID . EQ ty

    EQ  shift, and go to state 112


state 80

   76 letexp: LET decs IN . exps END

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 31
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    exps       go to state 113
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 81

   17 decs: dec decs .

    $default  reduce using rule 17 (decs)


state 82

   22 tydecs: tydec tydecs .

    $default  reduce using rule 22 (tydecs)


state 83

   34 fundecs: fundec fundecs .

    $default  reduce using rule 34 (fundecs)


state 84

   53 opexp: valexp . PLUS valexp
   53      | valexp PLUS valexp .
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    $default  reduce using rule 53 (opexp)


state 85

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   54      | valexp MINUS valexp .
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    $default  reduce using rule 54 (opexp)


state 86

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   55      | valexp TIMES valexp .
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    $default  reduce using rule 55 (opexp)


state 87

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   56      | valexp DIVIDE valexp .
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    $default  reduce using rule 56 (opexp)


state 88

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   58      | valexp EQ valexp .
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 58 (opexp)


state 89

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   59      | valexp NEQ valexp .
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 59 (opexp)


state 90

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   61      | valexp LT valexp .
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 61 (opexp)


state 91

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   63      | valexp LE valexp .
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 63 (opexp)


state 92

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   60      | valexp GT valexp .
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 60 (opexp)


state 93

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   62      | valexp GE valexp .
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52

    EQ   error (nonassociative)
    NEQ  error (nonassociative)
    LT   error (nonassociative)
    LE   error (nonassociative)
    GT   error (nonassociative)
    GE   error (nonassociative)

    $default  reduce using rule 62 (opexp)


state 94

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   64      | valexp AND valexp .
   65      | valexp . OR valexp

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58

    $default  reduce using rule 64 (opexp)


state 95

   53 opexp: valexp . PLUS valexp
   54      | valexp . MINUS valexp
   55      | valexp . TIMES valexp
   56      | valexp . DIVIDE valexp
   58      | valexp . EQ valexp
   59      | valexp . NEQ valexp
   60      | valexp . GT valexp
   61      | valexp . LT valexp
   62      | valexp . GE valexp
   63      | valexp . LE valexp
   64      | valexp . AND valexp
   65      | valexp . OR valexp
   65      | valexp OR valexp .

    PLUS    shift, and go to state 49
    MINUS   shift, and go to state 50
    TIMES   shift, and go to state 51
    DIVIDE  shift, and go to state 52
    EQ      shift, and go to state 53
    NEQ     shift, and go to state 54
    LT      shift, and go to state 55
    LE      shift, and go to state 56
    GT      shift, and go to state 57
    GE      shift, and go to state 58
    AND     shift, and go to state 59

    $default  reduce using rule 65 (opexp)


state 96

   43 lvalue: lvalue LBRACK exp . RBRACK

    RBRACK  shift, and go to state 114


state 97

   42 lvalue: lvalue DOT ID .

    $default  reduce using rule 42 (lvalue)


state 98

   71 assignexp: lvalue ASSIGN exp .

    $default  reduce using rule 71 (assignexp)


state 99

   52 funcargs: exp COMMA . funcargs

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 65
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    funcargs   go to state 115
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 100

   50 callexp: ID LPAREN funcargs RPAREN .

    $default  reduce using rule 50 (callexp)


state 101

   41 lvalue: ID LBRACK exp RBRACK .
   44 arrayexp: ID LBRACK exp RBRACK . OF exp

    OF  shift, and go to state 116

    $default  reduce using rule 41 (lvalue)


state 102

   70 recfield: ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 117
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 103

   67 recexp: ID LBRACE recfields RBRACE .

    $default  reduce using rule 67 (recexp)


state 104

   69 recfields: recfield COMMA . recfields

    ID  shift, and go to state 68

    recfields  go to state 118
    recfield   go to state 71


state 105

   48 exps: exp SEMICOLON exps .

    $default  reduce using rule 48 (exps)


state 106

   72 ifexp: IF valexp THEN exp .
   73      | IF valexp THEN exp . ELSE exp

    ELSE  shift, and go to state 119

    $default  reduce using rule 72 (ifexp)


state 107

   74 whileexp: WHILE exp DO exp .

    $default  reduce using rule 74 (whileexp)


state 108

   75 forexp: FOR ID ASSIGN exp . TO exp DO exp

    TO  shift, and go to state 120


state 109

   35 fundec: FUNCTION ID LPAREN . tyfields RPAREN EQ exp
   36       | FUNCTION ID LPAREN . tyfields RPAREN COLON ID EQ exp

    ID  shift, and go to state 121

    $default  reduce using rule 27 (tyfields)

    tyfields  go to state 122
    tyfield   go to state 123


state 110

   32 vardec: VAR ID COLON . ID ASSIGN exp

    ID  shift, and go to state 124


state 111

   31 vardec: VAR ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 125
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 112

   23 tydec: TYPE ID EQ . ty

    ID      shift, and go to state 126
    LBRACE  shift, and go to state 127
    ARRAY   shift, and go to state 128

    ty  go to state 129


state 113

   76 letexp: LET decs IN exps . END

    END  shift, and go to state 130


state 114

   43 lvalue: lvalue LBRACK exp RBRACK .

    $default  reduce using rule 43 (lvalue)


state 115

   52 funcargs: exp COMMA funcargs .

    $default  reduce using rule 52 (funcargs)


state 116

   44 arrayexp: ID LBRACK exp RBRACK OF . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 131
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 117

   70 recfield: ID EQ exp .

    $default  reduce using rule 70 (recfield)


state 118

   69 recfields: recfield COMMA recfields .

    $default  reduce using rule 69 (recfields)


state 119

   73 ifexp: IF valexp THEN exp ELSE . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 132
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 120

   75 forexp: FOR ID ASSIGN exp TO . exp DO exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 133
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 121

   30 tyfield: ID . COLON ID

    COLON  shift, and go to state 134


state 122

   35 fundec: FUNCTION ID LPAREN tyfields . RPAREN EQ exp
   36       | FUNCTION ID LPAREN tyfields . RPAREN COLON ID EQ exp

    RPAREN  shift, and go to state 135


state 123

   28 tyfields: tyfield .
   29         | tyfield . COMMA tyfields

    COMMA  shift, and go to state 136

    $default  reduce using rule 28 (tyfields)


state 124

   32 vardec: VAR ID COLON ID . ASSIGN exp

    ASSIGN  shift, and go to state 137


state 125

   31 vardec: VAR ID ASSIGN exp .

    $default  reduce using rule 31 (vardec)


state 126

   24 ty: ID .

    $default  reduce using rule 24 (ty)


state 127

   25 ty: LBRACE . tyfields RBRACE

    ID  shift, and go to state 121

    $default  reduce using rule 27 (tyfields)

    tyfields  go to state 138
    tyfield   go to state 123


state 128

   26 ty: ARRAY . OF ID

    OF  shift, and go to state 139


state 129

   23 tydec: TYPE ID EQ ty .

    $default  reduce using rule 23 (tydec)


state 130

   76 letexp: LET decs IN exps END .

    $default  reduce using rule 76 (letexp)


state 131

   44 arrayexp: ID LBRACK exp RBRACK OF exp .

    $default  reduce using rule 44 (arrayexp)


state 132

   73 ifexp: IF valexp THEN exp ELSE exp .

    $default  reduce using rule 73 (ifexp)


state 133

   75 forexp: FOR ID ASSIGN exp TO exp . DO exp

    DO  shift, and go to state 140


state 134

   30 tyfield: ID COLON . ID

    ID  shift, and go to state 141


state 135

   35 fundec: FUNCTION ID LPAREN tyfields RPAREN . EQ exp
   36       | FUNCTION ID LPAREN tyfields RPAREN . COLON ID EQ exp

    COLON  shift, and go to state 142
    EQ     shift, and go to state 143


state 136

   29 tyfields: tyfield COMMA . tyfields

    ID  shift, and go to state 121

    $default  reduce using rule 27 (tyfields)

    tyfields  go to state 144
    tyfield   go to state 123


state 137

   32 vardec: VAR ID COLON ID ASSIGN . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 145
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 138

   25 ty: LBRACE tyfields . RBRACE

    RBRACE  shift, and go to state 146


state 139

   26 ty: ARRAY OF . ID

    ID  shift, and go to state 147


state 140

   75 forexp: FOR ID ASSIGN exp TO exp DO . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 148
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 141

   30 tyfield: ID COLON ID .

    $default  reduce using rule 30 (tyfield)


state 142

   36 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON . ID EQ exp

    ID  shift, and go to state 149


state 143

   35 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 150
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 144

   29 tyfields: tyfield COMMA tyfields .

    $default  reduce using rule 29 (tyfields)


state 145

   32 vardec: VAR ID COLON ID ASSIGN exp .

    $default  reduce using rule 32 (vardec)


state 146

   25 ty: LBRACE tyfields RBRACE .

    $default  reduce using rule 25 (ty)


state 147

   26 ty: ARRAY OF ID .

    $default  reduce using rule 26 (ty)


state 148

   75 forexp: FOR ID ASSIGN exp TO exp DO exp .

    $default  reduce using rule 75 (forexp)


state 149

   36 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID . EQ exp

    EQ  shift, and go to state 151


state 150

   35 fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp .

    $default  reduce using rule 35 (fundec)


state 151

   36 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ . exp

    ID      shift, and go to state 1
    STRING  shift, and go to state 2
    INT     shift, and go to state 3
    LPAREN  shift, and go to state 4
    MINUS   shift, and go to state 5
    IF      shift, and go to state 6
    WHILE   shift, and go to state 7
    FOR     shift, and go to state 8
    LET     shift, and go to state 9
    BREAK   shift, and go to state 10
    NIL     shift, and go to state 11

    exp        go to state 152
    valexp     go to state 14
    constexp   go to state 15
    lvalue     go to state 16
    arrayexp   go to state 17
    seqlist    go to state 18
    callexp    go to state 19
    opexp      go to state 20
    recexp     go to state 21
    assignexp  go to state 22
    ifexp      go to state 23
    whileexp   go to state 24
    forexp     go to state 25
    letexp     go to state 26


state 152

   36 fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp .

    $default  reduce using rule 36 (fundec)
